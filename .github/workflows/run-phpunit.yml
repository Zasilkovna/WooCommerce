name: PHPUnit tests

on:
  push:
    branches: [ main, pre-release ]
  pull_request:

jobs:
  phpunit:
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        php-version: [ '8.1' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, intl
          coverage: no

      - name: php version
        run: php -v

      - name: Install Composer dependencies
        run: composer install

      - name: Run PHPUnit
        run: composer run tests-unit

  # job for code coverage
  code-coverage:
    runs-on: ubuntu-24.04
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          extensions: mbstring, intl
          coverage: yes

      - name: php version
        run: php -v

      - name: Install Composer dependencies
        run: composer install

      - name: Run PHPUnit with code coverage
        run: |
          composer run tests-coverage
          cat tests-coverage/coverage.txt > tests-coverage/coverage-summary.txt

      - name: Post coverage report as comment in PR
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const coverageSummary = fs.readFileSync('tests-coverage/coverage-summary.txt', 'utf8');
            
            const commentBody = `
            ## :bar_chart: Code Coverage Report
            \`\`\`
            ${coverageSummary}
            \`\`\`
            `;
            
            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.payload.pull_request.number,
            });
            
            const existingComment = comments.find(comment => comment.body.includes(':bar_chart: Code Coverage Report'));
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                ...context.repo,
                comment_id: existingComment.id,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.payload.pull_request.number,
                body: commentBody,
              });
            }

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: junit-results
          path: ./tests-coverage/log/junit.xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./tests-coverage/cobertura.xml

      - name: Generate graphic representation of code coverage development
        run: php cli/graph-coverage/generate-graph.php ${{ secrets.GITHUB_TOKEN }} ${{ github.base_ref }} temp/${{ github.base_ref }}.png

      - name: Upload coverage graph
        uses: actions/upload-artifact@v4
        with:
          name: coverage-graph
          path: temp/${{ github.base_ref }}.png

      - name: Set GitHub run ID as environment variable
        run: echo "RUN_ID=${{ github.run_id }}" >> $GITHUB_ENV

      - name: Post graphic representation of code coverage development as comment in PR
        uses: actions/github-script@v6
        with:
          script: |
            const artifactsResponse = await github.rest.actions.listArtifactsForRepo({
              ...context.repo
            });
            
            const artifacts = artifactsResponse.data.artifacts;
            const artifact = artifacts.find(a => a.name === 'coverage-graph');
            
            if (!artifact) {
              throw new Error('Artifact "coverage-graph" not found.');
            }
            
            const runId = process.env.RUN_ID;
            const imageUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}/artifacts/${artifact.id}`;
            const commentBody = `
            ## :bar_chart: Graphic representation of code coverage development
            <a href="${imageUrl}">
              Download code coverage development graph here.
            </a>
            `;
            
            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.payload.pull_request.number,
            });
            
            const existingComment = comments.find(comment => comment.body.includes(':bar_chart: Graphic representation of code coverage development'));
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                ...context.repo,
                comment_id: existingComment.id,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.payload.pull_request.number,
                body: commentBody,
              });
            }
